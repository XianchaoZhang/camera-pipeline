// TODO
// include sigma and lambda in the optimization
// optimize a_i
// fix supersampling

#include<stdio.h>
#include<string>
#include "Halide.h"
#include "halide_image_io.h"
#include <math.h>
#include "clock.h"
#define R 0
#define G 1
#define B 2
using namespace std;
using namespace Halide::Tools;
using namespace Halide::ConciseCasts;
using namespace Halide;

int main(int argc, char **argv) {
  Halide::Buffer<uint8_t> in = load_image("./images/inputs/1.jpg");

  Expr sigma = 2.5f; //optimize this parameter
  Var x, y, c;
  
  Expr lambda = 0.75f; //optimize this parameter
  Expr gauss = exp(-x*x/(2*sigma*sigma)) / (sqrtf(2*M_PI)*sigma);
  Expr gauss_0 = 1.0f / (sqrtf(2*M_PI)*sigma);
  Func h_sharp_k;
  h_sharp_k(x) = lambda * -gauss;
  h_sharp_k(0) = 1.0f + lambda * (1.0f - gauss_0);
  Func in_bounded = BoundaryConditions::repeat_edge(in);
  
  Func h_sharp_y;
  h_sharp_y(x, y, c) = (h_sharp_k(0) * in_bounded(x, y, c) +
  		     h_sharp_k(1) * (in_bounded(x, y-1, c) +
  				     in_bounded(x, y+1, c)) +
  		     h_sharp_k(2) * (in_bounded(x, y-2, c) +
  				     in_bounded(x, y+2, c)) +
  		      h_sharp_k(3) * (in_bounded(x, y-3, c) +
  				     in_bounded(x, y+3, c)));
  Func h_sharp;
  h_sharp(x, y, c) = (h_sharp_k(0) * h_sharp_y(x, y, c) +
  		      h_sharp_k(1) * (h_sharp_y(x-1, y, c) +
  				      h_sharp_y(x+1, y, c)) +
  		      h_sharp_k(2) * (h_sharp_y(x-2, y, c) +
  				      h_sharp_y(x+2, y, c)) +
  		      h_sharp_k(3) * (h_sharp_y(x-2, y, c) +
  				      h_sharp_y(x+2, y, c)));

  Func h_sharp_u8;
  h_sharp_u8(x, y, c) = u8(h_sharp(x, y, c));

  Func h_sharp_inv_k;
  // h_sharp_k(, y) = lambda * -gauss
  // h_sharp_k(0) = 1.0f + lambda * (1.0f - gauss)
    
  h_sharp_inv_k(x) = - (lambda * -gauss) + (lambda * lambda * gauss * gauss);
  h_sharp_inv_k(0) = 1.0f - lambda * (1.0f - gauss_0) + lambda * lambda * (1.0f - gauss_0) * (1.0f - gauss_0);
												
  Func h_sharp_inv_y;
  h_sharp_inv_y(x, y, c) = (h_sharp_inv_k(0) * h_sharp(x, y, c) +
  		     h_sharp_inv_k(1) * (h_sharp(x, y-1, c) +
  				     h_sharp(x, y+1, c)) +
  		     h_sharp_inv_k(2) * (h_sharp(x, y-2, c) +
  				     h_sharp(x, y+2, c)) +
  		      h_sharp_inv_k(3) * (h_sharp(x, y-3, c) +
  				     h_sharp(x, y+3, c)));
  Func h_sharp_inv;
  h_sharp_inv(x, y, c) = (h_sharp_inv_k(0) * h_sharp_y(x, y, c) +
  		      h_sharp_inv_k(1) * (h_sharp_y(x-1, y, c) +
  				      h_sharp_y(x+1, y, c)) +
  		      h_sharp_inv_k(2) * (h_sharp_y(x-2, y, c) +
  				      h_sharp_y(x+2, y, c)) +
  		      h_sharp_inv_k(3) * (h_sharp_y(x-3, y, c) +
  				      h_sharp_y(x+3, y, c)));

  Func h_sharp_inv_u8;
  h_sharp_inv_u8(x, y, c) = u8(h_sharp_inv(x, y, c));

  Func p; // this is the supersampling function 
  p(x, y, c) = h_sharp_inv(x, y, 0);

  Func p_red;
  p_red(x, y) = p(x, y, R);

  Func p_green;
  p_green(x, y) = p(x, y, G);
  
  Func p_blue;
  p_blue(x, y) = p(x, y, B);
  
  
  Func h_inv_ca_rg_k;
  h_inv_ca_rg_k(x) = 0;
  Func h_inv_ca_bg_k;
  h_inv_ca_bg_k(x) = 0;

  Func p_red_conv_h_inv_y;
  p_red_conv_h_inv_y(x, y) = (h_inv_ca_rg_k(0) * p_red(x, y) +
			      h_inv_ca_rg_k(1) * (p_red(x, y-1) +
					 p_red(x, y+1)) +
			      h_inv_ca_rg_k(2) * (p_red(x, y-2) +
					 p_red(x, y+2)) +
			      h_inv_ca_rg_k(3) * (p_red(x, y-3) +
					  p_red(x, y+3)));
  Func p_red_conv_h_inv;
  p_red_conv_h_inv(x, y) = (h_sharp_inv_k(0) * p_red_conv_h_inv_y(x, y) +
		      h_sharp_inv_k(1) * (p_red_conv_h_inv_y(x - 1, y) +
					  p_red_conv_h_inv_y(x + 1, y)) +
		      h_sharp_inv_k(2) * (p_red_conv_h_inv_y(x - 2, y) +
					  p_red_conv_h_inv_y(x + 2, y)) +
		      h_sharp_inv_k(3) * (p_red_conv_h_inv_y(x - 3, y) +
					  p_red_conv_h_inv_y(x + 3, y)));

  Func loss_red;
  loss_red(x, y) =  pow(abs(p_red_conv_h_inv(x, y) - p_green(x, y)), 2);

  Func p_blue_conv_h_inv_y;
  p_blue_conv_h_inv_y(x, y) = (h_inv_ca_bg_k(0) * p_blue(x, y) +
			 h_inv_ca_bg_k(1) * (p_blue(x, y-1) +
					     p_blue(x, y+1)) +
			 h_inv_ca_bg_k(2) * (p_blue(x, y-2) +
					     p_blue(x, y+2)) +
			 h_inv_ca_bg_k(3) * (p_blue(x, y-3) + p_blue(x, y+3))); 

  Func p_blue_conv_h_inv;
  p_blue_conv_h_inv(x, y) = (h_inv_ca_bg_k(0) * p_blue(x, y) +
			 h_inv_ca_bg_k(1) * (p_blue(x - 1, y) +
					     p_blue(x + 1, y)) +
			 h_inv_ca_bg_k(2) * (p_blue(x - 2, y) +
					     p_blue(x + 2, y)) +
			 h_inv_ca_bg_k(3) * (p_blue(x - 3, y) + p_blue(x + 3, y))); 

  Func loss_blue;
  loss_blue(x, y) = pow(abs(p_blue_conv_h_inv(x, y) - p_green(x, y)), 2);
  
  // Func loss;
  // loss() = 0.f;
  // loss() += loss_red(x, y) + loss_blue(x, y);
  // auto d_loss_d = Halide::propagate_adjoints(loss);
  // Func d_loss_d_h_inv_ca_rg_k = d_loss_d(h_inv_ca_rg_k);
  // Func d_loss_d_h_inv_ca_bg_k = d_loss_d(h_inv_ca_bg_k);

  Func theta;
  theta(x, y, c) = in_bounded(x, y, c);
  
  // Func img;
  
  // img(x, y, c) = f32(0);
  // img(x, y, R) = (h_sharp_k(0) * theta(x, y, R) +
  // 		  h_sharp_k(1) * (theta(x-1, y, R) +
  // 				  theta(x+1, y, R)) +
  // 		      h_sharp_k(2) * (theta(x-2, y, R) +
  // 				      theta(x+2, y, R)) +
  // 		  h_sharp_k(3) * (theta(x-2, y, R) +
  // 				  theta(x+2, y, R)));
  
  // img(x, y, B) = (h_sharp_k(0) * theta(x, y, B) +
  // 		  h_sharp_k(1) * (theta(x-1, y, B) +
  // 				  theta(x+1, y, B)) +
  // 		      h_sharp_k(2) * (theta(x-2, y, B) +
  // 				      theta(x+2, y, B)) +
  // 		  h_sharp_k(3) * theta(x-2, y, B) +
  // 		  theta(x+2, y, c));
  // img(x, y, G) = in_bounded(x, y, G);
  
  double t1 = current_time(); 
  Buffer<uint8_t> output = img.realize(in.width(), in.height(), in.channels());
  double t2 = current_time();
  cout<<"Time: "<< t2 - t1 <<endl;
  save_image(output, "./images/outputs/conv_flower.jpg");  
} 
